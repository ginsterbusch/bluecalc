<?php
/**
 * A small script to calculate Blueprint.css Grids
 *
 * @param int $target			The total width of your grid
 * @param int $col_min_width	Minimal column width
 * @param int $col_max_width	Maximal column width
 * @param int $mar_min_width	Minimal margin width
 * @param int $mar_max_width	Maximal margin width
 */

/**
 * Initializes a requested parameter
 *
 * @param string $param The paramter to read
 * @param int $default The default value
 */
function getParam($param, $default) {
	return (array_key_exists($param, $_REQUEST) && (int)$_REQUEST[$param] > 0) ? (int)$_REQUEST[$param] : $default;
}
 
$width 		= getParam('width', 960);
$columns	= getParam('columns', 24);
$span		= getParam('span', 30);
$margin		= getParam('margin', 10);

// Check for overflow
if ($width < 5000 && $columns < 200 && $span < 200 && $margin < 1000) {

$input_dif 	= 12;

if (array_key_exists('preview', $_REQUEST) && $_REQUEST['preview'] == '1') {
	$preview = true;


	$strPageTitle = 'Grid source view';
	require_once('includes/templates/header.php');
?>

	<pre class="brush: css;">
<?php
} else {
	header('Content-type: text/css; charset=utf-8');
	header('Content-Disposition: attachment; filename="grid.css"');
}

?>

/* --------------------------------------------------------------

   BLUEPRINT CSS
    * Filename:        grid.css
    * Version:         1.0.1 (2011-05-14)
    * Website:         http://code.google.com/p/blueprintcss/

   Generated by:
    * BlueCalc2 (<?php echo date('Y-m-d') ?>) [http://f2w.de/bluecalc]

   Blueprint.css is licensed by the conditions of the MIT license.
   This document has been created by BlueCalc, a grid creation utility for blueprint.
   Also check out the "Blueprint CSS Generator" by kematzy (http://kematzy.com/blueprint-generator/)
	
   == STRUCTURE: ========================
    * Page width:            <?php echo $width; ?> px
    * Number of columns:     <?php echo $columns; ?> 
    * Column width:          <?php echo $span; ?> px
    * Margin width:          <?php echo $margin; ?> px
   ======================================
   
   The blueprint grid is calculated as follows:
   Total width = (number_of_columns * column_width) - margin_width
   
   For more information on blueprint.css check out http://wiki.github.com/joshuaclayton/blueprint-css
   
-------------------------------------------------------------- */

/* A container should group all your columns. */
.container {
  width: <?php echo $width; ?>px;
  margin: 0 auto;
}

/* Use this class on any div.span / container to see the grid. */
.showgrid { 
  background: url(src/grid.png); 
}


/* Columns
-------------------------------------------------------------- */

/* Sets up basic grid floating and margin. */
.column<?php 
	for ($col=1 ; $col <= $columns ; $col++) { 
		echo ', .span-'.$col;
	} ?> {
  float: left;
  margin-right: <?php echo $margin; ?>px;
}

/* The last column in a row needs this class. */
.last { margin-right: 0; }

/* Use these classes to set the width of a column. */
<?php for ($col=1 ; $col <= $columns ; $col++) {
	echo '.span-'.$col.' { width: '.($span * $col + $margin * ($col - 1)).'px;'.( $col == $columns ? ' margin-right: 0;' : '' ).' }'."\n";
} ?>

/* Use these classes to set the width of an input. */
<?php for ($col=1 ; $col <= $columns ; $col++) {
	if ($col > 1)
		echo ', ';
	echo 'input.span-'.$col.', textarea.span-'.$col;
} ?> {
  border-left-width: 1px;
  border-right-width: 1px;
  padding-left: 5px;
  padding-right: 5px;
}

<?php for ($col=1 ; $col <= $columns ; $col++) {
	echo 'input.span-'.$col.', textarea.span-'.$col.' { width: '.(($span + $margin) * $col - $margin - $input_dif).'px; }'."\n";
} ?>

/* Add these to a column to append empty cols. */

<?php for ($col=1 ; $col < $columns ; $col++) {
	echo '.append-'.$col.' { padding-right: '.(($span + $margin) * $col).'px; }'."\n";
} ?>

/* Add these to a column to prepend empty cols. */

<?php for ($col=1 ; $col < $columns ; $col++) {
	echo '.prepend-'.$col.' { padding-left: '.(($span + $margin) * $col).'px; }'."\n";
} ?>

/* Border on right hand side of a column. */
.border {
	padding-right: 4px;
	margin-right: 5px;
	border-right: 1px solid #ddd;
}

/* Border with more whitespace, spans one column. */
.colborder {
	padding-right: 24px;
	margin-right: 25px;
	border-right: 1px solid #ddd;
}

/* Use these classes on an element to push it into the 
next column, or to pull it into the previous column.  */
<?php 
$pull = array();
for ($col = 1 ; $col <= $columns ; $col++) {
	echo '.pull-'.$col.' { margin-left: -'.(($span + $margin) * $col).'px; }'."\n";
	$pull[] = '.pull-'.$col;
} 
echo implode(', ', $pull);
?> { 
	float: left;
	position:relative;
}

<?php 
$push = array();
for ($col = 1 ; $col <= $columns ; $col++) {
	$w = (($span + $margin) * $col);
	echo '.push-'.$col.' { margin: 0 -'.$w.'px 1.5em '.$w.'px; }'."\n";
	$push[] = '.push-'.$col;
} 
echo implode(', ', $push);
?> { 
	float: right;
	position:relative;
}

/* Misc classes and elements
-------------------------------------------------------------- */

/* In case you need to add a gutter above/below an element */
div.prepend-top, .prepend-top { margin-top: 1.5em; }
div.append-bottom, .append-bottom { margin-bottom: 1.5em; }

/* Use a .box to create a padded box inside a column.  */ 
.box {
	padding: 1.5em;
	margin-bottom: 1.5em;
	background: #E5ECF9;
}

/* Use this to create a horizontal ruler across a column. */
hr {
	background: #DDD;
	color: #DDD;
	clear: both;
	float: none;
	width: 100%;
	height: 1px;
	margin: 0 0 17px;
	border: none;
}

hr.space {
	background: #FFF;
	color: #FFF;
	visibility: hidden;
}

/* Clearing floats without extra markup
   Based on How To Clear Floats Without Structural Markup by PiE
   [http://www.positioniseverything.net/easyclearing.html] */

.clearfix:after, .container:after {
	content: "\0020";
	display: block;
	height: 0;
	clear: both;
	visibility: hidden;
	overflow: hidden;
}
.clearfix, .container { display: block; }

/* Regular clearing
   apply to column that should drop below previous ones. */

.clear { clear: both; }
.left { float: left; }
.right { float: right; }
<?php if ($preview) { ?>
		</pre>
	</body>
</html>
<?php } 
} else {
	exit('Parameters out of range');
}
